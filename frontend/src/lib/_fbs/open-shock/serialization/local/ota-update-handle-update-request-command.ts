// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class OtaUpdateHandleUpdateRequestCommand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OtaUpdateHandleUpdateRequestCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOtaUpdateHandleUpdateRequestCommand(bb:flatbuffers.ByteBuffer, obj?:OtaUpdateHandleUpdateRequestCommand):OtaUpdateHandleUpdateRequestCommand {
  return (obj || new OtaUpdateHandleUpdateRequestCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOtaUpdateHandleUpdateRequestCommand(bb:flatbuffers.ByteBuffer, obj?:OtaUpdateHandleUpdateRequestCommand):OtaUpdateHandleUpdateRequestCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OtaUpdateHandleUpdateRequestCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

accept():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startOtaUpdateHandleUpdateRequestCommand(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addAccept(builder:flatbuffers.Builder, accept:boolean) {
  builder.addFieldInt8(0, +accept, +false);
}

static endOtaUpdateHandleUpdateRequestCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOtaUpdateHandleUpdateRequestCommand(builder:flatbuffers.Builder, accept:boolean):flatbuffers.Offset {
  OtaUpdateHandleUpdateRequestCommand.startOtaUpdateHandleUpdateRequestCommand(builder);
  OtaUpdateHandleUpdateRequestCommand.addAccept(builder, accept);
  return OtaUpdateHandleUpdateRequestCommand.endOtaUpdateHandleUpdateRequestCommand(builder);
}
}
