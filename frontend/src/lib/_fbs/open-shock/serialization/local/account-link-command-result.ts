// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AccountLinkResultCode } from '../../../open-shock/serialization/local/account-link-result-code';


export class AccountLinkCommandResult {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AccountLinkCommandResult {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAccountLinkCommandResult(bb:flatbuffers.ByteBuffer, obj?:AccountLinkCommandResult):AccountLinkCommandResult {
  return (obj || new AccountLinkCommandResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAccountLinkCommandResult(bb:flatbuffers.ByteBuffer, obj?:AccountLinkCommandResult):AccountLinkCommandResult {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AccountLinkCommandResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

result():AccountLinkResultCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : AccountLinkResultCode.Success;
}

static startAccountLinkCommandResult(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addResult(builder:flatbuffers.Builder, result:AccountLinkResultCode) {
  builder.addFieldInt8(0, result, AccountLinkResultCode.Success);
}

static endAccountLinkCommandResult(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAccountLinkCommandResult(builder:flatbuffers.Builder, result:AccountLinkResultCode):flatbuffers.Offset {
  AccountLinkCommandResult.startAccountLinkCommandResult(builder);
  AccountLinkCommandResult.addResult(builder, result);
  return AccountLinkCommandResult.endAccountLinkCommandResult(builder);
}
}
