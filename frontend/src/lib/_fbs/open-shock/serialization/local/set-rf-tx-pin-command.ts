// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class SetRfTxPinCommand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetRfTxPinCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetRfTxPinCommand(bb:flatbuffers.ByteBuffer, obj?:SetRfTxPinCommand):SetRfTxPinCommand {
  return (obj || new SetRfTxPinCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetRfTxPinCommand(bb:flatbuffers.ByteBuffer, obj?:SetRfTxPinCommand):SetRfTxPinCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetRfTxPinCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pin():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startSetRfTxPinCommand(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPin(builder:flatbuffers.Builder, pin:number) {
  builder.addFieldInt8(0, pin, 0);
}

static endSetRfTxPinCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSetRfTxPinCommand(builder:flatbuffers.Builder, pin:number):flatbuffers.Offset {
  SetRfTxPinCommand.startSetRfTxPinCommand(builder);
  SetRfTxPinCommand.addPin(builder, pin);
  return SetRfTxPinCommand.endSetRfTxPinCommand(builder);
}
}
