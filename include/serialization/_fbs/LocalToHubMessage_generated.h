// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOCALTOHUBMESSAGE_OPENSHOCK_SERIALIZATION_LOCAL_H_
#define FLATBUFFERS_GENERATED_LOCALTOHUBMESSAGE_OPENSHOCK_SERIALIZATION_LOCAL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace OpenShock {
namespace Serialization {
namespace Local {

struct WifiScanCommand;
struct WifiScanCommandBuilder;

struct WifiNetworkSaveCommand;
struct WifiNetworkSaveCommandBuilder;

struct WifiNetworkForgetCommand;
struct WifiNetworkForgetCommandBuilder;

struct WifiNetworkConnectCommand;
struct WifiNetworkConnectCommandBuilder;

struct WifiNetworkDisconnectCommand;
struct WifiNetworkDisconnectCommandBuilder;

struct OtaUpdateSetIsEnabledCommand;
struct OtaUpdateSetIsEnabledCommandBuilder;

struct OtaUpdateSetDomainCommand;
struct OtaUpdateSetDomainCommandBuilder;

struct OtaUpdateSetUpdateChannelCommand;
struct OtaUpdateSetUpdateChannelCommandBuilder;

struct OtaUpdateSetCheckIntervalCommand;
struct OtaUpdateSetCheckIntervalCommandBuilder;

struct OtaUpdateSetAllowBackendManagementCommand;
struct OtaUpdateSetAllowBackendManagementCommandBuilder;

struct OtaUpdateSetRequireManualApprovalCommand;
struct OtaUpdateSetRequireManualApprovalCommandBuilder;

struct OtaUpdateHandleUpdateRequestCommand;
struct OtaUpdateHandleUpdateRequestCommandBuilder;

struct OtaUpdateCheckForUpdatesCommand;
struct OtaUpdateCheckForUpdatesCommandBuilder;

struct OtaUpdateStartUpdateCommand;
struct OtaUpdateStartUpdateCommandBuilder;

struct AccountLinkCommand;
struct AccountLinkCommandBuilder;

struct AccountUnlinkCommand;
struct AccountUnlinkCommandBuilder;

struct SetRfTxPinCommand;
struct SetRfTxPinCommandBuilder;

struct SetEstopEnabledCommand;
struct SetEstopEnabledCommandBuilder;

struct SetEstopPinCommand;
struct SetEstopPinCommandBuilder;

struct LocalToHubMessage;
struct LocalToHubMessageBuilder;

enum class LocalToHubMessagePayload : uint8_t {
  NONE = 0,
  WifiScanCommand = 1,
  WifiNetworkSaveCommand = 2,
  WifiNetworkForgetCommand = 3,
  WifiNetworkConnectCommand = 4,
  WifiNetworkDisconnectCommand = 5,
  OtaUpdateSetIsEnabledCommand = 6,
  OtaUpdateSetDomainCommand = 7,
  OtaUpdateSetUpdateChannelCommand = 8,
  OtaUpdateSetCheckIntervalCommand = 9,
  OtaUpdateSetAllowBackendManagementCommand = 10,
  OtaUpdateSetRequireManualApprovalCommand = 11,
  OtaUpdateHandleUpdateRequestCommand = 12,
  OtaUpdateCheckForUpdatesCommand = 13,
  OtaUpdateStartUpdateCommand = 14,
  AccountLinkCommand = 15,
  AccountUnlinkCommand = 16,
  SetRfTxPinCommand = 17,
  SetEstopEnabledCommand = 18,
  SetEstopPinCommand = 19,
  MIN = NONE,
  MAX = SetEstopPinCommand
};

inline const LocalToHubMessagePayload (&EnumValuesLocalToHubMessagePayload())[20] {
  static const LocalToHubMessagePayload values[] = {
    LocalToHubMessagePayload::NONE,
    LocalToHubMessagePayload::WifiScanCommand,
    LocalToHubMessagePayload::WifiNetworkSaveCommand,
    LocalToHubMessagePayload::WifiNetworkForgetCommand,
    LocalToHubMessagePayload::WifiNetworkConnectCommand,
    LocalToHubMessagePayload::WifiNetworkDisconnectCommand,
    LocalToHubMessagePayload::OtaUpdateSetIsEnabledCommand,
    LocalToHubMessagePayload::OtaUpdateSetDomainCommand,
    LocalToHubMessagePayload::OtaUpdateSetUpdateChannelCommand,
    LocalToHubMessagePayload::OtaUpdateSetCheckIntervalCommand,
    LocalToHubMessagePayload::OtaUpdateSetAllowBackendManagementCommand,
    LocalToHubMessagePayload::OtaUpdateSetRequireManualApprovalCommand,
    LocalToHubMessagePayload::OtaUpdateHandleUpdateRequestCommand,
    LocalToHubMessagePayload::OtaUpdateCheckForUpdatesCommand,
    LocalToHubMessagePayload::OtaUpdateStartUpdateCommand,
    LocalToHubMessagePayload::AccountLinkCommand,
    LocalToHubMessagePayload::AccountUnlinkCommand,
    LocalToHubMessagePayload::SetRfTxPinCommand,
    LocalToHubMessagePayload::SetEstopEnabledCommand,
    LocalToHubMessagePayload::SetEstopPinCommand
  };
  return values;
}

inline const char * const *EnumNamesLocalToHubMessagePayload() {
  static const char * const names[21] = {
    "NONE",
    "WifiScanCommand",
    "WifiNetworkSaveCommand",
    "WifiNetworkForgetCommand",
    "WifiNetworkConnectCommand",
    "WifiNetworkDisconnectCommand",
    "OtaUpdateSetIsEnabledCommand",
    "OtaUpdateSetDomainCommand",
    "OtaUpdateSetUpdateChannelCommand",
    "OtaUpdateSetCheckIntervalCommand",
    "OtaUpdateSetAllowBackendManagementCommand",
    "OtaUpdateSetRequireManualApprovalCommand",
    "OtaUpdateHandleUpdateRequestCommand",
    "OtaUpdateCheckForUpdatesCommand",
    "OtaUpdateStartUpdateCommand",
    "AccountLinkCommand",
    "AccountUnlinkCommand",
    "SetRfTxPinCommand",
    "SetEstopEnabledCommand",
    "SetEstopPinCommand",
    nullptr
  };
  return names;
}

inline const char *EnumNameLocalToHubMessagePayload(LocalToHubMessagePayload e) {
  if (::flatbuffers::IsOutRange(e, LocalToHubMessagePayload::NONE, LocalToHubMessagePayload::SetEstopPinCommand)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLocalToHubMessagePayload()[index];
}

template<typename T> struct LocalToHubMessagePayloadTraits {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::NONE;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::WifiScanCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::WifiScanCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::WifiNetworkSaveCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::WifiNetworkSaveCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::WifiNetworkForgetCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::WifiNetworkForgetCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::WifiNetworkConnectCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::WifiNetworkConnectCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::WifiNetworkDisconnectCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::WifiNetworkDisconnectCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateSetIsEnabledCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetDomainCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateSetDomainCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateSetUpdateChannelCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateSetCheckIntervalCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateSetAllowBackendManagementCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateSetRequireManualApprovalCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateHandleUpdateRequestCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateCheckForUpdatesCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::OtaUpdateStartUpdateCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::AccountLinkCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::AccountLinkCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::AccountUnlinkCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::AccountUnlinkCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::SetRfTxPinCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::SetRfTxPinCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::SetEstopEnabledCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::SetEstopEnabledCommand;
};

template<> struct LocalToHubMessagePayloadTraits<OpenShock::Serialization::Local::SetEstopPinCommand> {
  static const LocalToHubMessagePayload enum_value = LocalToHubMessagePayload::SetEstopPinCommand;
};

bool VerifyLocalToHubMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, LocalToHubMessagePayload type);
bool VerifyLocalToHubMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<LocalToHubMessagePayload> *types);

struct WifiScanCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WifiScanCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiScanCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RUN = 4
  };
  bool run() const {
    return GetField<uint8_t>(VT_RUN, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_RUN, 1) &&
           verifier.EndTable();
  }
};

struct WifiScanCommandBuilder {
  typedef WifiScanCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_run(bool run) {
    fbb_.AddElement<uint8_t>(WifiScanCommand::VT_RUN, static_cast<uint8_t>(run), 0);
  }
  explicit WifiScanCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WifiScanCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WifiScanCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WifiScanCommand> CreateWifiScanCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool run = false) {
  WifiScanCommandBuilder builder_(_fbb);
  builder_.add_run(run);
  return builder_.Finish();
}

struct WifiScanCommand::Traits {
  using type = WifiScanCommand;
  static auto constexpr Create = CreateWifiScanCommand;
};

struct WifiNetworkSaveCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WifiNetworkSaveCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiNetworkSaveCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSID = 4,
    VT_PASSWORD = 6,
    VT_CONNECT = 8
  };
  const ::flatbuffers::String *ssid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SSID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool connect() const {
    return GetField<uint8_t>(VT_CONNECT, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.VerifyString(ssid()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyField<uint8_t>(verifier, VT_CONNECT, 1) &&
           verifier.EndTable();
  }
};

struct WifiNetworkSaveCommandBuilder {
  typedef WifiNetworkSaveCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssid(::flatbuffers::Offset<::flatbuffers::String> ssid) {
    fbb_.AddOffset(WifiNetworkSaveCommand::VT_SSID, ssid);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(WifiNetworkSaveCommand::VT_PASSWORD, password);
  }
  void add_connect(bool connect) {
    fbb_.AddElement<uint8_t>(WifiNetworkSaveCommand::VT_CONNECT, static_cast<uint8_t>(connect), 0);
  }
  explicit WifiNetworkSaveCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WifiNetworkSaveCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WifiNetworkSaveCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WifiNetworkSaveCommand> CreateWifiNetworkSaveCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ssid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0,
    bool connect = false) {
  WifiNetworkSaveCommandBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_ssid(ssid);
  builder_.add_connect(connect);
  return builder_.Finish();
}

struct WifiNetworkSaveCommand::Traits {
  using type = WifiNetworkSaveCommand;
  static auto constexpr Create = CreateWifiNetworkSaveCommand;
};

inline ::flatbuffers::Offset<WifiNetworkSaveCommand> CreateWifiNetworkSaveCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr,
    const char *password = nullptr,
    bool connect = false) {
  auto ssid__ = ssid ? _fbb.CreateString(ssid) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return OpenShock::Serialization::Local::CreateWifiNetworkSaveCommand(
      _fbb,
      ssid__,
      password__,
      connect);
}

struct WifiNetworkForgetCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WifiNetworkForgetCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiNetworkForgetCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSID = 4
  };
  const ::flatbuffers::String *ssid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SSID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.VerifyString(ssid()) &&
           verifier.EndTable();
  }
};

struct WifiNetworkForgetCommandBuilder {
  typedef WifiNetworkForgetCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssid(::flatbuffers::Offset<::flatbuffers::String> ssid) {
    fbb_.AddOffset(WifiNetworkForgetCommand::VT_SSID, ssid);
  }
  explicit WifiNetworkForgetCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WifiNetworkForgetCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WifiNetworkForgetCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WifiNetworkForgetCommand> CreateWifiNetworkForgetCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ssid = 0) {
  WifiNetworkForgetCommandBuilder builder_(_fbb);
  builder_.add_ssid(ssid);
  return builder_.Finish();
}

struct WifiNetworkForgetCommand::Traits {
  using type = WifiNetworkForgetCommand;
  static auto constexpr Create = CreateWifiNetworkForgetCommand;
};

inline ::flatbuffers::Offset<WifiNetworkForgetCommand> CreateWifiNetworkForgetCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr) {
  auto ssid__ = ssid ? _fbb.CreateString(ssid) : 0;
  return OpenShock::Serialization::Local::CreateWifiNetworkForgetCommand(
      _fbb,
      ssid__);
}

struct WifiNetworkConnectCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WifiNetworkConnectCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiNetworkConnectCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSID = 4
  };
  const ::flatbuffers::String *ssid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SSID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.VerifyString(ssid()) &&
           verifier.EndTable();
  }
};

struct WifiNetworkConnectCommandBuilder {
  typedef WifiNetworkConnectCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssid(::flatbuffers::Offset<::flatbuffers::String> ssid) {
    fbb_.AddOffset(WifiNetworkConnectCommand::VT_SSID, ssid);
  }
  explicit WifiNetworkConnectCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WifiNetworkConnectCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WifiNetworkConnectCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WifiNetworkConnectCommand> CreateWifiNetworkConnectCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ssid = 0) {
  WifiNetworkConnectCommandBuilder builder_(_fbb);
  builder_.add_ssid(ssid);
  return builder_.Finish();
}

struct WifiNetworkConnectCommand::Traits {
  using type = WifiNetworkConnectCommand;
  static auto constexpr Create = CreateWifiNetworkConnectCommand;
};

inline ::flatbuffers::Offset<WifiNetworkConnectCommand> CreateWifiNetworkConnectCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr) {
  auto ssid__ = ssid ? _fbb.CreateString(ssid) : 0;
  return OpenShock::Serialization::Local::CreateWifiNetworkConnectCommand(
      _fbb,
      ssid__);
}

struct WifiNetworkDisconnectCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WifiNetworkDisconnectCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiNetworkDisconnectCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLACEHOLDER = 4
  };
  bool placeholder() const {
    return GetField<uint8_t>(VT_PLACEHOLDER, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PLACEHOLDER, 1) &&
           verifier.EndTable();
  }
};

struct WifiNetworkDisconnectCommandBuilder {
  typedef WifiNetworkDisconnectCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_placeholder(bool placeholder) {
    fbb_.AddElement<uint8_t>(WifiNetworkDisconnectCommand::VT_PLACEHOLDER, static_cast<uint8_t>(placeholder), 0);
  }
  explicit WifiNetworkDisconnectCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WifiNetworkDisconnectCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WifiNetworkDisconnectCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WifiNetworkDisconnectCommand> CreateWifiNetworkDisconnectCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool placeholder = false) {
  WifiNetworkDisconnectCommandBuilder builder_(_fbb);
  builder_.add_placeholder(placeholder);
  return builder_.Finish();
}

struct WifiNetworkDisconnectCommand::Traits {
  using type = WifiNetworkDisconnectCommand;
  static auto constexpr Create = CreateWifiNetworkDisconnectCommand;
};

struct OtaUpdateSetIsEnabledCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateSetIsEnabledCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetIsEnabledCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENABLED = 4
  };
  bool enabled() const {
    return GetField<uint8_t>(VT_ENABLED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENABLED, 1) &&
           verifier.EndTable();
  }
};

struct OtaUpdateSetIsEnabledCommandBuilder {
  typedef OtaUpdateSetIsEnabledCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_enabled(bool enabled) {
    fbb_.AddElement<uint8_t>(OtaUpdateSetIsEnabledCommand::VT_ENABLED, static_cast<uint8_t>(enabled), 0);
  }
  explicit OtaUpdateSetIsEnabledCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateSetIsEnabledCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateSetIsEnabledCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateSetIsEnabledCommand> CreateOtaUpdateSetIsEnabledCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool enabled = false) {
  OtaUpdateSetIsEnabledCommandBuilder builder_(_fbb);
  builder_.add_enabled(enabled);
  return builder_.Finish();
}

struct OtaUpdateSetIsEnabledCommand::Traits {
  using type = OtaUpdateSetIsEnabledCommand;
  static auto constexpr Create = CreateOtaUpdateSetIsEnabledCommand;
};

struct OtaUpdateSetDomainCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateSetDomainCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetDomainCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DOMAIN = 4
  };
  const ::flatbuffers::String *domain() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DOMAIN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DOMAIN) &&
           verifier.VerifyString(domain()) &&
           verifier.EndTable();
  }
};

struct OtaUpdateSetDomainCommandBuilder {
  typedef OtaUpdateSetDomainCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_domain(::flatbuffers::Offset<::flatbuffers::String> domain) {
    fbb_.AddOffset(OtaUpdateSetDomainCommand::VT_DOMAIN, domain);
  }
  explicit OtaUpdateSetDomainCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateSetDomainCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateSetDomainCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateSetDomainCommand> CreateOtaUpdateSetDomainCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> domain = 0) {
  OtaUpdateSetDomainCommandBuilder builder_(_fbb);
  builder_.add_domain(domain);
  return builder_.Finish();
}

struct OtaUpdateSetDomainCommand::Traits {
  using type = OtaUpdateSetDomainCommand;
  static auto constexpr Create = CreateOtaUpdateSetDomainCommand;
};

inline ::flatbuffers::Offset<OtaUpdateSetDomainCommand> CreateOtaUpdateSetDomainCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *domain = nullptr) {
  auto domain__ = domain ? _fbb.CreateString(domain) : 0;
  return OpenShock::Serialization::Local::CreateOtaUpdateSetDomainCommand(
      _fbb,
      domain__);
}

struct OtaUpdateSetUpdateChannelCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateSetUpdateChannelCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetUpdateChannelCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNEL = 4
  };
  const ::flatbuffers::String *channel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHANNEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.VerifyString(channel()) &&
           verifier.EndTable();
  }
};

struct OtaUpdateSetUpdateChannelCommandBuilder {
  typedef OtaUpdateSetUpdateChannelCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_channel(::flatbuffers::Offset<::flatbuffers::String> channel) {
    fbb_.AddOffset(OtaUpdateSetUpdateChannelCommand::VT_CHANNEL, channel);
  }
  explicit OtaUpdateSetUpdateChannelCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateSetUpdateChannelCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateSetUpdateChannelCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateSetUpdateChannelCommand> CreateOtaUpdateSetUpdateChannelCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> channel = 0) {
  OtaUpdateSetUpdateChannelCommandBuilder builder_(_fbb);
  builder_.add_channel(channel);
  return builder_.Finish();
}

struct OtaUpdateSetUpdateChannelCommand::Traits {
  using type = OtaUpdateSetUpdateChannelCommand;
  static auto constexpr Create = CreateOtaUpdateSetUpdateChannelCommand;
};

inline ::flatbuffers::Offset<OtaUpdateSetUpdateChannelCommand> CreateOtaUpdateSetUpdateChannelCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *channel = nullptr) {
  auto channel__ = channel ? _fbb.CreateString(channel) : 0;
  return OpenShock::Serialization::Local::CreateOtaUpdateSetUpdateChannelCommand(
      _fbb,
      channel__);
}

struct OtaUpdateSetCheckIntervalCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateSetCheckIntervalCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetCheckIntervalCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INTERVAL = 4
  };
  uint16_t interval() const {
    return GetField<uint16_t>(VT_INTERVAL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INTERVAL, 2) &&
           verifier.EndTable();
  }
};

struct OtaUpdateSetCheckIntervalCommandBuilder {
  typedef OtaUpdateSetCheckIntervalCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_interval(uint16_t interval) {
    fbb_.AddElement<uint16_t>(OtaUpdateSetCheckIntervalCommand::VT_INTERVAL, interval, 0);
  }
  explicit OtaUpdateSetCheckIntervalCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateSetCheckIntervalCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateSetCheckIntervalCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateSetCheckIntervalCommand> CreateOtaUpdateSetCheckIntervalCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t interval = 0) {
  OtaUpdateSetCheckIntervalCommandBuilder builder_(_fbb);
  builder_.add_interval(interval);
  return builder_.Finish();
}

struct OtaUpdateSetCheckIntervalCommand::Traits {
  using type = OtaUpdateSetCheckIntervalCommand;
  static auto constexpr Create = CreateOtaUpdateSetCheckIntervalCommand;
};

struct OtaUpdateSetAllowBackendManagementCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateSetAllowBackendManagementCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetAllowBackendManagementCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ALLOW = 4
  };
  bool allow() const {
    return GetField<uint8_t>(VT_ALLOW, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ALLOW, 1) &&
           verifier.EndTable();
  }
};

struct OtaUpdateSetAllowBackendManagementCommandBuilder {
  typedef OtaUpdateSetAllowBackendManagementCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_allow(bool allow) {
    fbb_.AddElement<uint8_t>(OtaUpdateSetAllowBackendManagementCommand::VT_ALLOW, static_cast<uint8_t>(allow), 0);
  }
  explicit OtaUpdateSetAllowBackendManagementCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateSetAllowBackendManagementCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateSetAllowBackendManagementCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateSetAllowBackendManagementCommand> CreateOtaUpdateSetAllowBackendManagementCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool allow = false) {
  OtaUpdateSetAllowBackendManagementCommandBuilder builder_(_fbb);
  builder_.add_allow(allow);
  return builder_.Finish();
}

struct OtaUpdateSetAllowBackendManagementCommand::Traits {
  using type = OtaUpdateSetAllowBackendManagementCommand;
  static auto constexpr Create = CreateOtaUpdateSetAllowBackendManagementCommand;
};

struct OtaUpdateSetRequireManualApprovalCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateSetRequireManualApprovalCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetRequireManualApprovalCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUIRE = 4
  };
  bool require() const {
    return GetField<uint8_t>(VT_REQUIRE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REQUIRE, 1) &&
           verifier.EndTable();
  }
};

struct OtaUpdateSetRequireManualApprovalCommandBuilder {
  typedef OtaUpdateSetRequireManualApprovalCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_require(bool require) {
    fbb_.AddElement<uint8_t>(OtaUpdateSetRequireManualApprovalCommand::VT_REQUIRE, static_cast<uint8_t>(require), 0);
  }
  explicit OtaUpdateSetRequireManualApprovalCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateSetRequireManualApprovalCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateSetRequireManualApprovalCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateSetRequireManualApprovalCommand> CreateOtaUpdateSetRequireManualApprovalCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool require = false) {
  OtaUpdateSetRequireManualApprovalCommandBuilder builder_(_fbb);
  builder_.add_require(require);
  return builder_.Finish();
}

struct OtaUpdateSetRequireManualApprovalCommand::Traits {
  using type = OtaUpdateSetRequireManualApprovalCommand;
  static auto constexpr Create = CreateOtaUpdateSetRequireManualApprovalCommand;
};

struct OtaUpdateHandleUpdateRequestCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateHandleUpdateRequestCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateHandleUpdateRequestCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCEPT = 4
  };
  bool accept() const {
    return GetField<uint8_t>(VT_ACCEPT, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ACCEPT, 1) &&
           verifier.EndTable();
  }
};

struct OtaUpdateHandleUpdateRequestCommandBuilder {
  typedef OtaUpdateHandleUpdateRequestCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_accept(bool accept) {
    fbb_.AddElement<uint8_t>(OtaUpdateHandleUpdateRequestCommand::VT_ACCEPT, static_cast<uint8_t>(accept), 0);
  }
  explicit OtaUpdateHandleUpdateRequestCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateHandleUpdateRequestCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateHandleUpdateRequestCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateHandleUpdateRequestCommand> CreateOtaUpdateHandleUpdateRequestCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool accept = false) {
  OtaUpdateHandleUpdateRequestCommandBuilder builder_(_fbb);
  builder_.add_accept(accept);
  return builder_.Finish();
}

struct OtaUpdateHandleUpdateRequestCommand::Traits {
  using type = OtaUpdateHandleUpdateRequestCommand;
  static auto constexpr Create = CreateOtaUpdateHandleUpdateRequestCommand;
};

struct OtaUpdateCheckForUpdatesCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateCheckForUpdatesCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateCheckForUpdatesCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNEL = 4
  };
  const ::flatbuffers::String *channel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHANNEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.VerifyString(channel()) &&
           verifier.EndTable();
  }
};

struct OtaUpdateCheckForUpdatesCommandBuilder {
  typedef OtaUpdateCheckForUpdatesCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_channel(::flatbuffers::Offset<::flatbuffers::String> channel) {
    fbb_.AddOffset(OtaUpdateCheckForUpdatesCommand::VT_CHANNEL, channel);
  }
  explicit OtaUpdateCheckForUpdatesCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateCheckForUpdatesCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateCheckForUpdatesCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateCheckForUpdatesCommand> CreateOtaUpdateCheckForUpdatesCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> channel = 0) {
  OtaUpdateCheckForUpdatesCommandBuilder builder_(_fbb);
  builder_.add_channel(channel);
  return builder_.Finish();
}

struct OtaUpdateCheckForUpdatesCommand::Traits {
  using type = OtaUpdateCheckForUpdatesCommand;
  static auto constexpr Create = CreateOtaUpdateCheckForUpdatesCommand;
};

inline ::flatbuffers::Offset<OtaUpdateCheckForUpdatesCommand> CreateOtaUpdateCheckForUpdatesCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *channel = nullptr) {
  auto channel__ = channel ? _fbb.CreateString(channel) : 0;
  return OpenShock::Serialization::Local::CreateOtaUpdateCheckForUpdatesCommand(
      _fbb,
      channel__);
}

struct OtaUpdateStartUpdateCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateStartUpdateCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateStartUpdateCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNEL = 4,
    VT_VERSION = 6
  };
  const ::flatbuffers::String *channel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHANNEL);
  }
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.VerifyString(channel()) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           verifier.EndTable();
  }
};

struct OtaUpdateStartUpdateCommandBuilder {
  typedef OtaUpdateStartUpdateCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_channel(::flatbuffers::Offset<::flatbuffers::String> channel) {
    fbb_.AddOffset(OtaUpdateStartUpdateCommand::VT_CHANNEL, channel);
  }
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(OtaUpdateStartUpdateCommand::VT_VERSION, version);
  }
  explicit OtaUpdateStartUpdateCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateStartUpdateCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateStartUpdateCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateStartUpdateCommand> CreateOtaUpdateStartUpdateCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> channel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0) {
  OtaUpdateStartUpdateCommandBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_channel(channel);
  return builder_.Finish();
}

struct OtaUpdateStartUpdateCommand::Traits {
  using type = OtaUpdateStartUpdateCommand;
  static auto constexpr Create = CreateOtaUpdateStartUpdateCommand;
};

inline ::flatbuffers::Offset<OtaUpdateStartUpdateCommand> CreateOtaUpdateStartUpdateCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *channel = nullptr,
    const char *version = nullptr) {
  auto channel__ = channel ? _fbb.CreateString(channel) : 0;
  auto version__ = version ? _fbb.CreateString(version) : 0;
  return OpenShock::Serialization::Local::CreateOtaUpdateStartUpdateCommand(
      _fbb,
      channel__,
      version__);
}

struct AccountLinkCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountLinkCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.AccountLinkCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4
  };
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           verifier.EndTable();
  }
};

struct AccountLinkCommandBuilder {
  typedef AccountLinkCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(AccountLinkCommand::VT_CODE, code);
  }
  explicit AccountLinkCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AccountLinkCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AccountLinkCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AccountLinkCommand> CreateAccountLinkCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0) {
  AccountLinkCommandBuilder builder_(_fbb);
  builder_.add_code(code);
  return builder_.Finish();
}

struct AccountLinkCommand::Traits {
  using type = AccountLinkCommand;
  static auto constexpr Create = CreateAccountLinkCommand;
};

inline ::flatbuffers::Offset<AccountLinkCommand> CreateAccountLinkCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *code = nullptr) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  return OpenShock::Serialization::Local::CreateAccountLinkCommand(
      _fbb,
      code__);
}

struct AccountUnlinkCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountUnlinkCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.AccountUnlinkCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLACEHOLDER = 4
  };
  bool placeholder() const {
    return GetField<uint8_t>(VT_PLACEHOLDER, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PLACEHOLDER, 1) &&
           verifier.EndTable();
  }
};

struct AccountUnlinkCommandBuilder {
  typedef AccountUnlinkCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_placeholder(bool placeholder) {
    fbb_.AddElement<uint8_t>(AccountUnlinkCommand::VT_PLACEHOLDER, static_cast<uint8_t>(placeholder), 0);
  }
  explicit AccountUnlinkCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AccountUnlinkCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AccountUnlinkCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AccountUnlinkCommand> CreateAccountUnlinkCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool placeholder = false) {
  AccountUnlinkCommandBuilder builder_(_fbb);
  builder_.add_placeholder(placeholder);
  return builder_.Finish();
}

struct AccountUnlinkCommand::Traits {
  using type = AccountUnlinkCommand;
  static auto constexpr Create = CreateAccountUnlinkCommand;
};

struct SetRfTxPinCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SetRfTxPinCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.SetRfTxPinCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4
  };
  int8_t pin() const {
    return GetField<int8_t>(VT_PIN, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_PIN, 1) &&
           verifier.EndTable();
  }
};

struct SetRfTxPinCommandBuilder {
  typedef SetRfTxPinCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pin(int8_t pin) {
    fbb_.AddElement<int8_t>(SetRfTxPinCommand::VT_PIN, pin, 0);
  }
  explicit SetRfTxPinCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SetRfTxPinCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SetRfTxPinCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SetRfTxPinCommand> CreateSetRfTxPinCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t pin = 0) {
  SetRfTxPinCommandBuilder builder_(_fbb);
  builder_.add_pin(pin);
  return builder_.Finish();
}

struct SetRfTxPinCommand::Traits {
  using type = SetRfTxPinCommand;
  static auto constexpr Create = CreateSetRfTxPinCommand;
};

struct SetEstopEnabledCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SetEstopEnabledCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.SetEstopEnabledCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENABLED = 4
  };
  bool enabled() const {
    return GetField<uint8_t>(VT_ENABLED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENABLED, 1) &&
           verifier.EndTable();
  }
};

struct SetEstopEnabledCommandBuilder {
  typedef SetEstopEnabledCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_enabled(bool enabled) {
    fbb_.AddElement<uint8_t>(SetEstopEnabledCommand::VT_ENABLED, static_cast<uint8_t>(enabled), 0);
  }
  explicit SetEstopEnabledCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SetEstopEnabledCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SetEstopEnabledCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SetEstopEnabledCommand> CreateSetEstopEnabledCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool enabled = false) {
  SetEstopEnabledCommandBuilder builder_(_fbb);
  builder_.add_enabled(enabled);
  return builder_.Finish();
}

struct SetEstopEnabledCommand::Traits {
  using type = SetEstopEnabledCommand;
  static auto constexpr Create = CreateSetEstopEnabledCommand;
};

struct SetEstopPinCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SetEstopPinCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.SetEstopPinCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4
  };
  int8_t pin() const {
    return GetField<int8_t>(VT_PIN, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_PIN, 1) &&
           verifier.EndTable();
  }
};

struct SetEstopPinCommandBuilder {
  typedef SetEstopPinCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pin(int8_t pin) {
    fbb_.AddElement<int8_t>(SetEstopPinCommand::VT_PIN, pin, 0);
  }
  explicit SetEstopPinCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SetEstopPinCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SetEstopPinCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SetEstopPinCommand> CreateSetEstopPinCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t pin = 0) {
  SetEstopPinCommandBuilder builder_(_fbb);
  builder_.add_pin(pin);
  return builder_.Finish();
}

struct SetEstopPinCommand::Traits {
  using type = SetEstopPinCommand;
  static auto constexpr Create = CreateSetEstopPinCommand;
};

struct LocalToHubMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LocalToHubMessageBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.LocalToHubMessage";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  OpenShock::Serialization::Local::LocalToHubMessagePayload payload_type() const {
    return static_cast<OpenShock::Serialization::Local::LocalToHubMessagePayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const OpenShock::Serialization::Local::WifiScanCommand *payload_as_WifiScanCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::WifiScanCommand ? static_cast<const OpenShock::Serialization::Local::WifiScanCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::WifiNetworkSaveCommand *payload_as_WifiNetworkSaveCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::WifiNetworkSaveCommand ? static_cast<const OpenShock::Serialization::Local::WifiNetworkSaveCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::WifiNetworkForgetCommand *payload_as_WifiNetworkForgetCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::WifiNetworkForgetCommand ? static_cast<const OpenShock::Serialization::Local::WifiNetworkForgetCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::WifiNetworkConnectCommand *payload_as_WifiNetworkConnectCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::WifiNetworkConnectCommand ? static_cast<const OpenShock::Serialization::Local::WifiNetworkConnectCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::WifiNetworkDisconnectCommand *payload_as_WifiNetworkDisconnectCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::WifiNetworkDisconnectCommand ? static_cast<const OpenShock::Serialization::Local::WifiNetworkDisconnectCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand *payload_as_OtaUpdateSetIsEnabledCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateSetIsEnabledCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetDomainCommand *payload_as_OtaUpdateSetDomainCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateSetDomainCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetDomainCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand *payload_as_OtaUpdateSetUpdateChannelCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateSetUpdateChannelCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand *payload_as_OtaUpdateSetCheckIntervalCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateSetCheckIntervalCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand *payload_as_OtaUpdateSetAllowBackendManagementCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateSetAllowBackendManagementCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand *payload_as_OtaUpdateSetRequireManualApprovalCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateSetRequireManualApprovalCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand *payload_as_OtaUpdateHandleUpdateRequestCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateHandleUpdateRequestCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand *payload_as_OtaUpdateCheckForUpdatesCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateCheckForUpdatesCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand *payload_as_OtaUpdateStartUpdateCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::OtaUpdateStartUpdateCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::AccountLinkCommand *payload_as_AccountLinkCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::AccountLinkCommand ? static_cast<const OpenShock::Serialization::Local::AccountLinkCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::AccountUnlinkCommand *payload_as_AccountUnlinkCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::AccountUnlinkCommand ? static_cast<const OpenShock::Serialization::Local::AccountUnlinkCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::SetRfTxPinCommand *payload_as_SetRfTxPinCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::SetRfTxPinCommand ? static_cast<const OpenShock::Serialization::Local::SetRfTxPinCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::SetEstopEnabledCommand *payload_as_SetEstopEnabledCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::SetEstopEnabledCommand ? static_cast<const OpenShock::Serialization::Local::SetEstopEnabledCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::SetEstopPinCommand *payload_as_SetEstopPinCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToHubMessagePayload::SetEstopPinCommand ? static_cast<const OpenShock::Serialization::Local::SetEstopPinCommand *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyLocalToHubMessagePayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const OpenShock::Serialization::Local::WifiScanCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::WifiScanCommand>() const {
  return payload_as_WifiScanCommand();
}

template<> inline const OpenShock::Serialization::Local::WifiNetworkSaveCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::WifiNetworkSaveCommand>() const {
  return payload_as_WifiNetworkSaveCommand();
}

template<> inline const OpenShock::Serialization::Local::WifiNetworkForgetCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::WifiNetworkForgetCommand>() const {
  return payload_as_WifiNetworkForgetCommand();
}

template<> inline const OpenShock::Serialization::Local::WifiNetworkConnectCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::WifiNetworkConnectCommand>() const {
  return payload_as_WifiNetworkConnectCommand();
}

template<> inline const OpenShock::Serialization::Local::WifiNetworkDisconnectCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::WifiNetworkDisconnectCommand>() const {
  return payload_as_WifiNetworkDisconnectCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand>() const {
  return payload_as_OtaUpdateSetIsEnabledCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetDomainCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetDomainCommand>() const {
  return payload_as_OtaUpdateSetDomainCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand>() const {
  return payload_as_OtaUpdateSetUpdateChannelCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand>() const {
  return payload_as_OtaUpdateSetCheckIntervalCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand>() const {
  return payload_as_OtaUpdateSetAllowBackendManagementCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand>() const {
  return payload_as_OtaUpdateSetRequireManualApprovalCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand>() const {
  return payload_as_OtaUpdateHandleUpdateRequestCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand>() const {
  return payload_as_OtaUpdateCheckForUpdatesCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand>() const {
  return payload_as_OtaUpdateStartUpdateCommand();
}

template<> inline const OpenShock::Serialization::Local::AccountLinkCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::AccountLinkCommand>() const {
  return payload_as_AccountLinkCommand();
}

template<> inline const OpenShock::Serialization::Local::AccountUnlinkCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::AccountUnlinkCommand>() const {
  return payload_as_AccountUnlinkCommand();
}

template<> inline const OpenShock::Serialization::Local::SetRfTxPinCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::SetRfTxPinCommand>() const {
  return payload_as_SetRfTxPinCommand();
}

template<> inline const OpenShock::Serialization::Local::SetEstopEnabledCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::SetEstopEnabledCommand>() const {
  return payload_as_SetEstopEnabledCommand();
}

template<> inline const OpenShock::Serialization::Local::SetEstopPinCommand *LocalToHubMessage::payload_as<OpenShock::Serialization::Local::SetEstopPinCommand>() const {
  return payload_as_SetEstopPinCommand();
}

struct LocalToHubMessageBuilder {
  typedef LocalToHubMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(OpenShock::Serialization::Local::LocalToHubMessagePayload payload_type) {
    fbb_.AddElement<uint8_t>(LocalToHubMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(LocalToHubMessage::VT_PAYLOAD, payload);
  }
  explicit LocalToHubMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LocalToHubMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LocalToHubMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LocalToHubMessage> CreateLocalToHubMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    OpenShock::Serialization::Local::LocalToHubMessagePayload payload_type = OpenShock::Serialization::Local::LocalToHubMessagePayload::NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  LocalToHubMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

struct LocalToHubMessage::Traits {
  using type = LocalToHubMessage;
  static auto constexpr Create = CreateLocalToHubMessage;
};

inline bool VerifyLocalToHubMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, LocalToHubMessagePayload type) {
  switch (type) {
    case LocalToHubMessagePayload::NONE: {
      return true;
    }
    case LocalToHubMessagePayload::WifiScanCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::WifiScanCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::WifiNetworkSaveCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::WifiNetworkSaveCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::WifiNetworkForgetCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::WifiNetworkForgetCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::WifiNetworkConnectCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::WifiNetworkConnectCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::WifiNetworkDisconnectCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::WifiNetworkDisconnectCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateSetIsEnabledCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateSetDomainCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateSetDomainCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateSetUpdateChannelCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateSetCheckIntervalCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateSetAllowBackendManagementCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateSetRequireManualApprovalCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateHandleUpdateRequestCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateCheckForUpdatesCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::OtaUpdateStartUpdateCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::AccountLinkCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::AccountLinkCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::AccountUnlinkCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::AccountUnlinkCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::SetRfTxPinCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::SetRfTxPinCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::SetEstopEnabledCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::SetEstopEnabledCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToHubMessagePayload::SetEstopPinCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::SetEstopPinCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyLocalToHubMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<LocalToHubMessagePayload> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyLocalToHubMessagePayload(
        verifier,  values->Get(i), types->GetEnum<LocalToHubMessagePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const OpenShock::Serialization::Local::LocalToHubMessage *GetLocalToHubMessage(const void *buf) {
  return ::flatbuffers::GetRoot<OpenShock::Serialization::Local::LocalToHubMessage>(buf);
}

inline const OpenShock::Serialization::Local::LocalToHubMessage *GetSizePrefixedLocalToHubMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OpenShock::Serialization::Local::LocalToHubMessage>(buf);
}

inline bool VerifyLocalToHubMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OpenShock::Serialization::Local::LocalToHubMessage>(nullptr);
}

inline bool VerifySizePrefixedLocalToHubMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OpenShock::Serialization::Local::LocalToHubMessage>(nullptr);
}

inline void FinishLocalToHubMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::Local::LocalToHubMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLocalToHubMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::Local::LocalToHubMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Local
}  // namespace Serialization
}  // namespace OpenShock

#endif  // FLATBUFFERS_GENERATED_LOCALTOHUBMESSAGE_OPENSHOCK_SERIALIZATION_LOCAL_H_
